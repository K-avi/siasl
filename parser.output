Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmts: stmt
    3      | stmts stmt

    4 stmt: loop
    5     | op

    6 loop: LBRACKET stmts RBRACKET

    7 op: PRINT
    8   | READ
    9   | LEFT
   10   | RIGHT
   11   | UP
   12   | DOWN
   13   | PLUS
   14   | MINUS
   15   | MULT
   16   | DIV
   17   | NEUTRAL


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PRINT <token> (258) 7
    READ <token> (259) 8
    LEFT <token> (260) 9
    RIGHT <token> (261) 10
    UP <token> (262) 11
    DOWN <token> (263) 12
    PLUS <token> (264) 13
    MINUS <token> (265) 14
    MULT <token> (266) 15
    DIV <token> (267) 16
    NEUTRAL <token> (268) 17
    LBRACKET <token> (269) 6
    RBRACKET <token> (270) 6


Nonterminals, with rules where they appear

    $accept (16)
        on left: 0
    program <instruction> (17)
        on left: 1
        on right: 0
    stmts <instruction> (18)
        on left: 2 3
        on right: 1 3 6
    stmt <instruction> (19)
        on left: 4 5
        on right: 2 3
    loop <instruction> (20)
        on left: 6
        on right: 4
    op <token> (21)
        on left: 7 8 9 10 11 12 13 14 15 16 17
        on right: 5


State 0

    0 $accept: • program $end

    PRINT     shift, and go to state 1
    READ      shift, and go to state 2
    LEFT      shift, and go to state 3
    RIGHT     shift, and go to state 4
    UP        shift, and go to state 5
    DOWN      shift, and go to state 6
    PLUS      shift, and go to state 7
    MINUS     shift, and go to state 8
    MULT      shift, and go to state 9
    DIV       shift, and go to state 10
    NEUTRAL   shift, and go to state 11
    LBRACKET  shift, and go to state 12

    program  go to state 13
    stmts    go to state 14
    stmt     go to state 15
    loop     go to state 16
    op       go to state 17


State 1

    7 op: PRINT •

    $default  reduce using rule 7 (op)


State 2

    8 op: READ •

    $default  reduce using rule 8 (op)


State 3

    9 op: LEFT •

    $default  reduce using rule 9 (op)


State 4

   10 op: RIGHT •

    $default  reduce using rule 10 (op)


State 5

   11 op: UP •

    $default  reduce using rule 11 (op)


State 6

   12 op: DOWN •

    $default  reduce using rule 12 (op)


State 7

   13 op: PLUS •

    $default  reduce using rule 13 (op)


State 8

   14 op: MINUS •

    $default  reduce using rule 14 (op)


State 9

   15 op: MULT •

    $default  reduce using rule 15 (op)


State 10

   16 op: DIV •

    $default  reduce using rule 16 (op)


State 11

   17 op: NEUTRAL •

    $default  reduce using rule 17 (op)


State 12

    6 loop: LBRACKET • stmts RBRACKET

    PRINT     shift, and go to state 1
    READ      shift, and go to state 2
    LEFT      shift, and go to state 3
    RIGHT     shift, and go to state 4
    UP        shift, and go to state 5
    DOWN      shift, and go to state 6
    PLUS      shift, and go to state 7
    MINUS     shift, and go to state 8
    MULT      shift, and go to state 9
    DIV       shift, and go to state 10
    NEUTRAL   shift, and go to state 11
    LBRACKET  shift, and go to state 12

    stmts  go to state 18
    stmt   go to state 15
    loop   go to state 16
    op     go to state 17


State 13

    0 $accept: program • $end

    $end  shift, and go to state 19


State 14

    1 program: stmts •
    3 stmts: stmts • stmt

    PRINT     shift, and go to state 1
    READ      shift, and go to state 2
    LEFT      shift, and go to state 3
    RIGHT     shift, and go to state 4
    UP        shift, and go to state 5
    DOWN      shift, and go to state 6
    PLUS      shift, and go to state 7
    MINUS     shift, and go to state 8
    MULT      shift, and go to state 9
    DIV       shift, and go to state 10
    NEUTRAL   shift, and go to state 11
    LBRACKET  shift, and go to state 12

    $default  reduce using rule 1 (program)

    stmt  go to state 20
    loop  go to state 16
    op    go to state 17


State 15

    2 stmts: stmt •

    $default  reduce using rule 2 (stmts)


State 16

    4 stmt: loop •

    $default  reduce using rule 4 (stmt)


State 17

    5 stmt: op •

    $default  reduce using rule 5 (stmt)


State 18

    3 stmts: stmts • stmt
    6 loop: LBRACKET stmts • RBRACKET

    PRINT     shift, and go to state 1
    READ      shift, and go to state 2
    LEFT      shift, and go to state 3
    RIGHT     shift, and go to state 4
    UP        shift, and go to state 5
    DOWN      shift, and go to state 6
    PLUS      shift, and go to state 7
    MINUS     shift, and go to state 8
    MULT      shift, and go to state 9
    DIV       shift, and go to state 10
    NEUTRAL   shift, and go to state 11
    LBRACKET  shift, and go to state 12
    RBRACKET  shift, and go to state 21

    stmt  go to state 20
    loop  go to state 16
    op    go to state 17


State 19

    0 $accept: program $end •

    $default  accept


State 20

    3 stmts: stmts stmt •

    $default  reduce using rule 3 (stmts)


State 21

    6 loop: LBRACKET stmts RBRACKET •

    $default  reduce using rule 6 (loop)
